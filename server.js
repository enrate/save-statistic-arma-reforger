require('dotenv/config');
const express = require('express');
const { Client, IntentsBitField } = require('discord.js');
const app = express();
const pool = require('./db');

// Middleware –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ JSON
app.use(express.json());

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PORT = 3000;
const API_TOKEN = 'dkfSkell35jwlslSL';
const DISCORD_BOT_TOKEN = process.env.DISCORD_BOT_TOKEN;
const CHANNEL_MAPPING = {
  "logger_player_connected": "1365101461788168202",
  "logger_player_killed": "1365155098052792360",
  "admin_notification": "DISCORD_CHANNEL_ID_FOR_ADMIN"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Discord –∫–ª–∏–µ–Ω—Ç–∞
const discordClient = new Client({ 
  intents: [IntentsBitField.Flags.Guilds, IntentsBitField.Flags.GuildMessages] 
});

// Middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞
const authMiddleware = (req, res, next) => {
  const authHeader = req.headers.authorization;
  
  if (!authHeader || !authHeader.startsWith('Bearer ')) {
    return res.status(401).json({ error: '–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è' });
  }

  const token = authHeader.split(' ')[1];
  
  if (token !== API_TOKEN) {
    return res.status(403).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }

  next();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Discord
async function sendToDiscord(channelId, message) {
  try {
    const channel = await discordClient.channels.fetch(channelId);
    if (channel && channel.isTextBased()) {
      await channel.send(message);
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Discord:', error);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤
app.post('/data', authMiddleware, async (req, res) => {
  console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', req.body);
  
  try {
    const events = req.body.events || [];
    for (const event of events) {
      const actionName = event.name;
      const eventData = event.data;

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
      let channelId;
      switch(actionName) {
        case 'logger_player_connected': {
          channelId = CHANNEL_MAPPING.logger_player_connected;
          await sendToDiscord(channelId, `üéÆ –ò–≥—Ä–æ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è: ${eventData.player} (ID: ${eventData.identity})`);
          
          // –ó–∞–ø–∏—Å—å –≤ –ë–î
          const connection = await pool.getConnection();
          try {
              await connection.query(
                  `INSERT INTO player_connections 
                  (player_id, player_name, timestamp_first_connection, timestamp_last_connection) 
                  VALUES (?, ?, NOW(), NOW())
                  ON DUPLICATE KEY UPDATE 
                      timestamp_last_connection = NOW(),
                      player_name = VALUES(player_name)`,
                  [eventData.identity, eventData.player]
              );
          } finally {
              connection.release();
          }
          break;
      }
      case 'logger_player_disconnected': {
        channelId = CHANNEL_MAPPING.logger_player_connected;
        await sendToDiscord(channelId, `üéÆ –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${eventData.player} (ID: ${eventData.identity})`);
        
        // –ó–∞–ø–∏—Å—å –≤ –ë–î
        const connection = await pool.getConnection();
        try {
          await connection.query(
            `UPDATE player_connections 
            SET timestamp_disconnection = NOW()
            WHERE player_id = ?`,
            [eventData.identity]
        );
        } finally {
            connection.release();
        }
        break;
    }

        case 'logger_player_killed': {
          channelId = CHANNEL_MAPPING.serveradmintools_player_killed;
          await sendToDiscord(channelId, `üî´ –ò–≥—Ä–æ–∫ ${eventData.instigator} —É–±–∏–ª${eventData.friendly ? ' —Å–æ—é–∑–Ω–∏–∫–∞' : '' } ${eventData.player}`);
          // –ó–∞–ø–∏—Å—å –≤ –ë–î
    const connection = await pool.getConnection();
    try {
      await connection.query(
        `INSERT INTO kill_events 
        (killer_name, victim_name, is_friendly, timestamp) 
        VALUES (?, ?, ?, NOW())`,
        [eventData.instigator, eventData.player, eventData.friendly]
      );
    } finally {
      connection.release();
    }
    break;
  }

        case 'admin_notification':
          channelId = CHANNEL_MAPPING.admin_notification;
          await sendToDiscord(channelId, `‚ö†Ô∏è –ê–¥–º–∏–Ω-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${eventData.message}`);
          break;

        default:
          console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:', actionName);
      }
    }

    res.status(200).json({ message: '–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã' });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏ Discord –±–æ—Ç–∞
discordClient.login(DISCORD_BOT_TOKEN).then(() => {
  console.log('Discord –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
  
  app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  });
});